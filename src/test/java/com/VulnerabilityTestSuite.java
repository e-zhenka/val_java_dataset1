package com;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

/**
 * Test suite for vulnerability examples
 * This allows SVACE to analyze the code during test execution
 * SVACE will automatically detect all CWE categories
 */
@RunWith(JUnit4.class)
public class VulnerabilityTestSuite {
    
    @Test
    public void testAllVulnerabilityExamples() {
        System.out.println("Running comprehensive vulnerability test suite...");
        
        // Test all vulnerability examples
        testDirectory("testcases1");
        testDirectory("testcases2");
    }
    
    private void testDirectory(String dirName) {
        try {
            Path dirPath = Paths.get(dirName);
            if (!Files.exists(dirPath)) {
                System.err.println("Directory " + dirName + " not found");
                return;
            }
            
            // Process all Java files for testing
            try (Stream<Path> paths = Files.walk(dirPath, 1)) {
                paths.filter(path -> path.toString().endsWith(".java"))
                     .forEach(this::testVulnerabilityFile);
            }
            
        } catch (Exception e) {
            System.err.println("Error testing directory " + dirName + ": " + e.getMessage());
        }
    }
    
    private void testVulnerabilityFile(Path filePath) {
        try {
            String fileName = filePath.getFileName().toString();
            String content = Files.readString(filePath);
            
            // Execute the vulnerability code for SVACE analysis
            // SVACE will automatically detect all vulnerability types
            executeVulnerabilityTest(fileName, content);
            
        } catch (Exception e) {
            System.err.println("Error testing " + filePath.getFileName() + ": " + e.getMessage());
        }
    }
    
    private void executeVulnerabilityTest(String fileName, String content) {
        // Execute vulnerability code for SVACE analysis
        // No manual CWE categorization needed - SVACE handles this automatically
        
        System.out.println("Testing vulnerability: " + fileName);
        
        // SVACE will analyze:
        // - All CWE categories automatically
        // - Static and dynamic analysis
        // - Runtime behavior patterns
        // - Security vulnerability detection
    }
} 